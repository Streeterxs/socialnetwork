schema {
  query: Query
  mutation: MutationType
  subscription: SubscriptionType
}

"""Comment type"""
type CommentType implements Node {
  """The ID of an object"""
  id: ID!
  author: UserType
  content: String
  likes: Int
  userHasLiked: Boolean
  createdAt: String
  updatedAt: String
  replies(after: String, first: Int, before: String, last: Int): ReplyTypeConnection
}

"""A connection to a list of items."""
type CommentTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentTypeEdge]
}

"""An edge in a connection."""
type CommentTypeEdge {
  """The item at the end of the edge"""
  node: CommentType

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateCommentInput {
  content: String
  post: String
  clientMutationId: String
}

type CreateCommentPayload {
  comment: CommentType
  clientMutationId: String
}

input CreateCommentSubscriptionInput {
  clientSubscriptionId: String
}

type CreateCommentSubscriptionPayload {
  comment: CommentType
  post: PostType
  clientSubscriptionId: String
}

input CreateReplyInput {
  content: String
  comment: String
  clientMutationId: String
}

type CreateReplyPayload {
  reply: ReplyType
  clientMutationId: String
}

input LikeCommentInput {
  comment: String
  clientMutationId: String
}

type LikeCommentPayload {
  comment: CommentType
  clientMutationId: String
}

input LikePostInput {
  post: String
  clientMutationId: String
}

type LikePostPayload {
  post: PostType
  clientMutationId: String
}

input LikeReplayInput {
  reply: String
  clientMutationId: String
}

type LikeReplayPayload {
  reply: ReplyType
  clientMutationId: String
}

input LoginInput {
  email: String
  password: String
  clientMutationId: String
}

type LoginPayload {
  user: UserType
  clientMutationId: String
}

"""Mutation Type"""
type MutationType {
  """Create new user"""
  CreateUser(input: UserCreationInput!): UserCreationPayload

  """Login a user, generates new token"""
  Login(input: LoginInput!): LoginPayload

  """Post Creation"""
  PostCreation(input: PostCreationInput!): PostCreationPayload

  """Mutation for like handling for posts"""
  LikePost(input: LikePostInput!): LikePostPayload

  """Create Comment Mutation"""
  CreateComment(input: CreateCommentInput!): CreateCommentPayload

  """Update total likes for a comment type"""
  LikeComment(input: LikeCommentInput!): LikeCommentPayload

  """Create Reply Mutation"""
  CreateReply(input: CreateReplyInput!): CreateReplyPayload

  """Handle likes for replies"""
  LikeReply(input: LikeReplayInput!): LikeReplayPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PostCreationInput {
  content: String
  clientMutationId: String
}

type PostCreationPayload {
  post: PostType
  clientMutationId: String
}

input PostCreationSubscriptionInput {
  clientSubscriptionId: String
}

type PostCreationSubscriptionPayload {
  post: PostType
  clientSubscriptionId: String
}

input PostLikeSubscriptionInput {
  clientSubscriptionId: String
}

type PostLikeSubscriptionPayload {
  post: PostType
  clientSubscriptionId: String
}

"""Post type"""
type PostType implements Node {
  """The ID of an object"""
  id: ID!
  author: UserType
  content: String
  likes: Int
  userHasLiked: Boolean
  createdAt: String
  updatedAt: String
  comments(after: String, first: Int, before: String, last: Int): CommentTypeConnection
}

"""A connection to a list of items."""
type PostTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostTypeEdge]
}

"""An edge in a connection."""
type PostTypeEdge {
  """The item at the end of the edge"""
  node: PostType

  """A cursor for use in pagination"""
  cursor: String!
}

"""General QueryType"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  myself: UserType
  myPosts(after: String, first: Int, before: String, last: Int): PostTypeConnection
}

"""Reply type"""
type ReplyType implements Node {
  """The ID of an object"""
  id: ID!
  author: UserType
  content: String
  createdAt: String
  updatedAt: String
  likes: Int
  userHasLiked: Boolean
}

"""A connection to a list of items."""
type ReplyTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReplyTypeEdge]
}

"""An edge in a connection."""
type ReplyTypeEdge {
  """The item at the end of the edge"""
  node: ReplyType

  """A cursor for use in pagination"""
  cursor: String!
}

type SubscriptionType {
  PostCreationSubscription(input: PostCreationSubscriptionInput!): PostCreationSubscriptionPayload

  """Post Like subscription"""
  PostLikeSubscription(input: PostLikeSubscriptionInput!): PostLikeSubscriptionPayload

  """Create Comment Subscription"""
  CreateCommentSubscription(input: CreateCommentSubscriptionInput!): CreateCommentSubscriptionPayload
}

input UserCreationInput {
  name: String
  password: String
  email: String
  clientMutationId: String
}

type UserCreationPayload {
  user: UserType
  clientMutationId: String
}

"""User type"""
type UserType {
  name: String
  password: String
  email: String
  createdAt: String
  updatedAt: String
  token: String
  friends(after: String, first: Int, before: String, last: Int): UserTypeConnection
  posts(after: String, first: Int, before: String, last: Int): PostTypeConnection
  _id: String
}

"""A connection to a list of items."""
type UserTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserTypeEdge]
}

"""An edge in a connection."""
type UserTypeEdge {
  """The item at the end of the edge"""
  node: UserType

  """A cursor for use in pagination"""
  cursor: String!
}

